---
import Header from "../../components/Header.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import Footer from "../../components/Footer.astro";
import { CollectionEntry, getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Prose from "../../components/Prose.astro";
import FormattedDate from "../../components/FormattedDate.astro";
import BlogCard from "../../components/BlogCard.astro";

type BlogEntry = CollectionEntry<"blog">;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  const featuredBlogs = blogEntries.filter((entry) => entry.data.featured);
  return blogEntries.map((blog) => ({
    params: { slug: blog.slug },
    props: { blog, featuredBlogs: featuredBlogs.slice(0, 2) },
  }));
}

// 2. For your template, you can get the entry directly from the prop
const { blog, featuredBlogs } = Astro.props as {
  blog: BlogEntry;
  featuredBlogs: BlogEntry[];
};
const { Content } = await blog.render();
---

<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <section class="my-8 max-w-[1240px] mx-auto px-4">
      <Header />
      <div class="w-full">
        <div
          class="w-full aspect-square sm:aspect-video bg-center bg-cover rounded-3xl overflow-hidden flex flex-col justify-end p-6 md:p-10"
          style={{
            backgroundImage: `linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.8)), url(${blog.data.image.url})`,
          }}
          transition:name={`blog-card-${blog.slug}`}
        >
          <div class="max-w-[900px] space-y-8">
            <h2
              transition:name={`blog-title-${blog.slug}`}
              class="text-white text-4xl sm:text-5xl font-bold mb-2"
            >
              {blog.data.title}
            </h2>
            <p
              class="text-white text-sm md:text-base divide-x divide-white leading-7 -ml-2"
            >
              {blog.data.featured && <span class="px-2">Featured article</span>}
              <span class="px-2"
                ><FormattedDate date={blog.data.pubDate} /></span
              >
            </p>
          </div>
        </div>
      </div>
      <Prose> <Content /></Prose>
      <div class="my-4 mt-12">
        <h3 class="text-2xl font-bold mb-4">Related blog posts</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          {featuredBlogs.map((blog) => <BlogCard blog={blog} />)}
        </div>
      </div>
      <Footer />
    </section>
  </body>
</html>
